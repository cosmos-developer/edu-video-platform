version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: interactive-learning-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: interactive_learning
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./database/init-scripts:/docker-entrypoint-initdb.d/init:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d interactive_learning"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis for Session Management and Caching
  redis:
    image: redis:7-alpine
    container_name: interactive-learning-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_dev_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # Node.js Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: interactive-learning-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      
      # Database Configuration
      DATABASE_URL: postgresql://postgres:postgres_dev_password@postgres:5432/interactive_learning?schema=public
      
      # JWT Configuration
      JWT_SECRET: dev_jwt_secret_change_in_production
      JWT_REFRESH_SECRET: dev_refresh_secret_change_in_production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Redis Configuration
      REDIS_URL: redis://:redis_dev_password@redis:6379
      
      # Development Configuration
      LOG_LEVEL: debug
      ENABLE_DEBUG_LOGGING: true
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3001
      
      # AI Configuration (placeholder for development)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  # Database Management Tool (Adminer)
  adminer:
    image: adminer:latest
    container_name: interactive-learning-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - app-network

  # Redis Management Tool (RedisInsight)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: interactive-learning-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - app-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: interactive-learning-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:3000/api
      - REACT_APP_WS_URL=ws://localhost:3000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    stdin_open: true
    tty: true
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_insight_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: interactive-learning-network